1 Primitive Data Types
Primitive data types are the most basic types of data. They are predefined by the programming language.

Data Type	Size	Description	Example
byte:	   1 byte (8 bits)	Stores whole numbers from -128 to 127     	                byte a = 10;
short:   2 bytes (16 bits)	Stores whole numbers from -32,768 to 32,767	              short b = 200;
int:   	 4 bytes (32 bits)	Stores whole numbers from -2³¹ to 2³¹-1	                  int c = 1000;
long:	   8 bytes (64 bits)	Stores whole numbers beyond int range	                    long d = 100000L;
float: 	 4 bytes (32 bits)	Stores fractional numbers with 6-7 digits precision     	float e = 10.5f;
double:	 8 bytes (64 bits)	Stores fractional numbers with 15 digits precision	      double f = 20.99;
char:	   2 bytes (16 bits)	Stores a single character	                                char g = 'A';
boolean: 1 bit	Stores true or false values	                                          boolean h = true;

2 Non-Primitive Data Types
Non-primitive data types are user-defined or derived from primitive types.

Strings:
A sequence of characters.
Example: String name = "John";

Arrays:
Collection of similar data types.
Example: int[] numbers = {1, 2, 3};

Classes and Objects:
Used to represent real-world entities.
Example:
class Car {
    String brand;
    int speed;
}

3 Variables
Variables store data values in memory.

Types of Variables:

Local Variables:
Declared inside a method or block.
Scope is limited to the method/block.
Example:
void display() {
    int localVar = 10;
    System.out.println(localVar);
}

Instance Variables:
Declared inside a class but outside any method.
Each object of the class gets its own copy.
Example:
class Employee {
    String name; // Instance variable
}

Static Variables:
Declared with the static keyword.
Shared among all objects of the class.
Example:
class Company {
    static String companyName = "TechCorp";
}

4 Constants and Literals:

Constants: Use final to declare a variable whose value cannot be changed.
Example:
final int MAX_VALUE = 100;

Literals: Fixed values assigned to variables.
Example:
int age = 25;       // Integer literal
char grade = 'A';   // Character literal
String name = "Alex"; // String literal

5 Type Casting:
Type casting is converting one data type into another.

Types of Casting:
Implicit Casting (Widening)
Automatically done by the compiler when there is no risk of data loss.
Example:
int num = 100;
double numDouble = num; // Implicit casting
System.out.println(numDouble); // Output: 100.0

Explicit Casting (Narrowing)
Manually done by the programmer when there is a risk of data loss.
Example:
double numDouble = 99.99;
int numInt = (int) numDouble; // Explicit casting
System.out.println(numInt); // Output: 99

Code Example Combining Everything:
--------------------------------------
public class DataTypesDemo {
    // Instance variable
    String instanceVar = "Instance Variable";

    // Static variable
    static String staticVar = "Static Variable";

    public static void main(String[] args) {
        // Local variable
        int localVar = 50;

        // Constants
        final int CONSTANT = 100;

        // Implicit casting
        int intVal = 42;
        double doubleVal = intVal;

        // Explicit casting
        double doubleNum = 42.99;
        int intNum = (int) doubleNum;

        // Print values
        System.out.println("Local Variable: " + localVar);
        System.out.println("Static Variable: " + staticVar);
        System.out.println("Implicit Casting: " + doubleVal);
        System.out.println("Explicit Casting: " + intNum);
        System.out.println("Constant: " + CONSTANT);
    }
}
