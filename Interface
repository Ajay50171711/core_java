Think of an interface as a blueprint that lists what methods a class MUST implement. It's like a menu at a restaurant - it tells you what dishes are available, but doesn't tell you how they're cooked.

Here's a simple real-world example using an Animal interface:
// This is our interface
interface Animal {
    void makeSound();    // Every animal must make some sound
    void move();         // Every animal must be able to move
}

// A Dog class that implements the Animal interface
class Dog implements Animal {
    // We MUST implement all methods from the interface
    public void makeSound() {
        System.out.println("Woof!");
    }
    
    public void move() {
        System.out.println("Dog runs on four legs");
    }
}

// A Bird class that also implements the Animal interface
class Bird implements Animal {
    public void makeSound() {
        System.out.println("Tweet!");
    }
    
    public void move() {
        System.out.println("Bird flies with wings");
    }
}

public class Main {
    public static void main(String[] args) {
        // We can create different animals
        Animal dog = new Dog();
        Animal bird = new Bird();
        
        // They both make different sounds
        dog.makeSound();  // Outputs: Woof!
        bird.makeSound(); // Outputs: Tweet!
        
        // They move differently
        dog.move();  // Outputs: Dog runs on four legs
        bird.move(); // Outputs: Bird flies with wings
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------
// Interface for playing media
interface Playable {
    void play();
    void pause();
    void stop();
}

// Interface for making calls
interface Callable {
    void makeCall(String number);
    void receiveCall(String number);
    void endCall();
}

// SmartPhone class implementing both interfaces
class SmartPhone implements Playable, Callable {
    // Implementing methods from Playable interface
    @Override
    public void play() {
        System.out.println("Playing media...");
    }
    
    @Override
    public void pause() {
        System.out.println("Media paused");
    }
    
    @Override
    public void stop() {
        System.out.println("Media stopped");
    }
    
    // Implementing methods from Callable interface
    @Override
    public void makeCall(String number) {
        System.out.println("Calling " + number);
    }
    
    @Override
    public void receiveCall(String number) {
        System.out.println("Incoming call from " + number);
    }
    
    @Override
    public void endCall() {
        System.out.println("Call ended");
    }
}
public class Main {
    public static void main(String[] args) {
        SmartPhone phone = new SmartPhone();
        
        // Using media player functions
        phone.play();    // Outputs: Playing media...
        phone.pause();   // Outputs: Media paused
        phone.stop();    // Outputs: Media stopped
        
        // Using phone functions
        phone.makeCall("123-456-7890");     // Outputs: Calling 123-456-7890
        phone.receiveCall("987-654-3210");  // Outputs: Incoming call from 987-654-3210
        phone.endCall();                    // Outputs: Call ended
        
        // We can also use polymorphism
        Playable mediaPlayer = phone;  // Treat it as just a media player
        Callable phoneDevice = phone;   // Treat it as just a phone
        
        mediaPlayer.play();            // Still works
        phoneDevice.makeCall("111-222-3333");  // Still works
    }
}


Key points about interfaces:

Methods in an interface are by default public and abstract
You use the implements keyword to implement an interface
A class must implement ALL methods declared in the interface
A class can implement multiple interfaces
Use commas to separate multiple interfaces when implementing
Interface methods don't have a body (no implementation)
