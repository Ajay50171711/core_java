java.util
│
├── Collection (interface)
│   │
│   ├── List (interface)
│   │   ├── ArrayList
│   │   ├── LinkedList
│   │   ├── Vector
│   │   │   └── Stack
│   │
│   ├── Set (interface)
│   │   ├── HashSet
│   │   │   └── LinkedHashSet
│   │   ├── TreeSet (implements SortedSet, NavigableSet)
│   │   ├── EnumSet
│   │
│   ├── Queue (interface)
│   │   ├── PriorityQueue
│   │   ├── LinkedList (also implements List)
│   │   │
│   │   └── Deque (interface, extends Queue)
│   │       ├── ArrayDeque
│   │       └── LinkedList (also implements List)

========================================================================================

1. List (interface)
├── Core Operations
│   ├── add(E e)                    // Appends element to end
│   ├── add(int index, E element)   // Inserts at position
│   ├── get(int index)              // Returns element at position
│   ├── remove(int index)           // Removes element at position
│   ├── set(int index, E element)   // Replaces element at position
│   └── size()                      // Returns number of elements
│
├── Positional Access
│   ├── indexOf(Object o)           // First occurrence position
│   ├── lastIndexOf(Object o)       // Last occurrence position
│   └── subList(int from, int to)   // View of portion of list
│
├── Implementations
│   ├── ArrayList
│   │   ├── Internal Structure: Dynamic array
│   │   ├── Performance Characteristics
│   │   │   ├── Random access: O(1)
│   │   │   ├── Insertion/Deletion (end): O(1) amortized
│   │   │   ├── Insertion/Deletion (middle): O(n)
│   │   │   └── Search: O(n)
│   │   └── Special Features: Fast iteration, good locality of reference
│   │
│   ├── LinkedList
│   │   ├── Internal Structure: Doubly-linked list
│   │   ├── Performance Characteristics
│   │   │   ├── Random access: O(n)
│   │   │   ├── Insertion/Deletion (any position with iterator): O(1)
│   │   │   ├── Insertion/Deletion (position by index): O(n)
│   │   │   └── Search: O(n)
│   │   └── Special Features: Implements both List and Deque interfaces
│   │
│   └── Vector (legacy, synchronized)
│       ├── Internal Structure: Dynamic array (synchronized)
│       ├── Performance Characteristics: Similar to ArrayList but thread-safe
│       └── Subclass: Stack
│           ├── Additional operations: push(), pop(), peek()
│           └── LIFO (Last-In-First-Out) behavior
========================================================================================
2. SET INTERFACE
Set (interface)
├── Core Operations
│   ├── add(E e)          // Adds element if not present
│   ├── contains(Object o) // Checks if element exists
│   ├── remove(Object o)   // Removes element if present
│   └── size()            // Returns number of elements
│
├── Bulk Operations
│   ├── addAll(Collection c)     // Union
│   ├── retainAll(Collection c)  // Intersection
│   └── removeAll(Collection c)  // Difference
│
├── SortedSet (sub-interface)
│   ├── first()           // First element
│   ├── last()            // Last element
│   └── subSet(E from, E to) // View of portion of set
│
├── NavigableSet (sub-interface of SortedSet)
│   ├── lower(E e)        // Greatest element < e
│   ├── floor(E e)        // Greatest element <= e
│   ├── ceiling(E e)      // Least element >= e
│   └── higher(E e)       // Least element > e
│
├── Implementations
│   ├── HashSet
│   │   ├── Internal Structure: Backed by HashMap
│   │   ├── Performance Characteristics
│   │   │   ├── add/remove/contains: O(1) average case
│   │   │   └── Iteration: O(capacity + size)
│   │   └── Special Features: Fastest implementation, no order guarantee
│   │
│   ├── LinkedHashSet
│   │   ├── Internal Structure: HashMap with linked list
│   │   ├── Performance Characteristics: Similar to HashSet with overhead for maintaining order
│   │   └── Special Features: Maintains insertion order
│   │
│   ├── TreeSet
│   │   ├── Internal Structure: Red-black tree (TreeMap)
│   │   ├── Performance Characteristics
│   │   │   ├── add/remove/contains: O(log n)
│   │   │   └── Ordered traversal: O(n)
│   │   └── Special Features: Sorted elements, implements NavigableSet
│   │
│   └── EnumSet
│       ├── Internal Structure: Bit vector
│       ├── Performance Characteristics: Very fast operations
│       └── Special Features: Specifically for enum values



=========================================================================================

3. QUEUE INTERFACE
Queue (interface)
├── Core Operations
│   ├── offer(E e)       // Adds element to queue (capacity-friendly)
│   ├── poll()           // Removes and returns head (returns null if empty)
│   ├── peek()           // Returns head without removing (null if empty)
│   └── size()           // Returns number of elements
│
├── Throws Exception Variants
│   ├── add(E e)         // Adds element (throws exception if capacity restricted)
│   ├── remove()         // Removes and returns head (throws exception if empty)
│   └── element()        // Returns head (throws exception if empty)
│
├── Deque (sub-interface, double-ended queue)
│   ├── offerFirst(E e)  // Inserts at front
│   ├── offerLast(E e)   // Inserts at end
│   ├── pollFirst()      // Removes from front
│   ├── pollLast()       // Removes from end
│   ├── peekFirst()      // Examines front
│   └── peekLast()       // Examines end
│
├── BlockingQueue (sub-interface in java.util.concurrent)
│   ├── put(E e)         // Blocks until space available
│   ├── take()           // Blocks until element available
│   ├── offer(E e, long timeout, TimeUnit unit) // Time-bounded insertion
│   └── poll(long timeout, TimeUnit unit)       // Time-bounded removal
│
├── Implementations
│   ├── PriorityQueue
│   │   ├── Internal Structure: Binary heap
│   │   ├── Performance Characteristics
│   │   │   ├── peek/element: O(1)
│   │   │   ├── poll/remove: O(log n)
│   │   │   ├── add/offer: O(log n)
│   │   │   └── Contains: O(n)
│   │   └── Special Features: Elements ordered by priority
│   │
│   ├── LinkedList (implements both List and Deque)
│   │   ├── Performance Characteristics for Queue operations
│   │   │   ├── offer/poll/peek: O(1)
│   │   └── Special Features: General-purpose list and queue
│   │
│   ├── ArrayDeque
│   │   ├── Internal Structure: Resizable circular array
│   │   ├── Performance Characteristics
│   │   │   ├── add/offer/remove/poll: O(1)
│   │   │   └── Contains: O(n)
│   │   └── Special Features: More efficient than LinkedList for most queue operations
│   │
│   └── Concurrent Queue Implementations
│       ├── ConcurrentLinkedQueue: Non-blocking concurrent queue
│       ├── ArrayBlockingQueue: Bounded blocking queue
│       ├── LinkedBlockingQueue: Optionally bounded blocking queue
│       └── PriorityBlockingQueue: Blocking priority queue

====================================================================================

ArrayList Internal Structure:
┌──────────────────────────────────────────────────┐
│  ArrayList                                        │
├──────────────────────────────────────────────────┤
│ - elementData: Object[]  // Internal array       │
│ - size: int             // Number of elements    │
├──────────────────────────────────────────────────┤
│ + add(E e): boolean                              │
│ + add(int index, E element): void                │
│ + get(int index): E                              │
│ + remove(int index): E                           │
│ + ensureCapacity(int minCapacity): void          │
│ + trimToSize(): void                             │
└──────────────────────────────────────────────────┘


=========================================================================

LinkedList Internal Structure:
┌──────────────────────────────────────────────────┐
│  LinkedList                                       │
├──────────────────────────────────────────────────┤
│ - first: Node<E>  // Reference to first node     │
│ - last: Node<E>   // Reference to last node      │
│ - size: int       // Number of elements          │
├──────────────────────────────────────────────────┤
│ + add(E e): boolean                              │
│ + add(int index, E element): void                │
│ + getFirst(): E                                  │
│ + getLast(): E                                   │
│ + removeFirst(): E                               │
│ + removeLast(): E                                │
└──────────────────────────────────────────────────┘
│
└── Node<E>
    ├── item: E       // Element value
    ├── next: Node<E> // Link to next node
    └── prev: Node<E> // Link to previous node

========================================================================================


import java.util.ArrayList;

public class ArrayListFunctionsDemo {
    public static void main(String[] args) {
        ArrayList<String> arrayList = new ArrayList<>();
        
        // Adding elements
        System.out.println("--- Adding Elements ---");
        arrayList.add("First Element");
        System.out.println("After add: " + arrayList);
        
        arrayList.add(0, "New First Element");
        System.out.println("After add at index 0: " + arrayList);
        
        arrayList.add("Last Element");
        System.out.println("After adding at end: " + arrayList);
        
        // Getting elements
        System.out.println("\n--- Retrieving Elements ---");
        System.out.println("Element at index 0: " + arrayList.get(0));
        System.out.println("Element at index 1: " + arrayList.get(1));
        System.out.println("Element at last index: " + arrayList.get(arrayList.size() - 1));
        
        // Set method - replacing elements
        System.out.println("\n--- Replacing Elements ---");
        arrayList.set(1, "Updated Element");
        System.out.println("After set at index 1: " + arrayList);
        
        // Adding more elements
        arrayList.add("Fourth Element");
        arrayList.add("Fifth Element");
        System.out.println("\nExpanded list: " + arrayList);
        
        // Removing elements
        System.out.println("\n--- Removing Elements ---");
        String removed = arrayList.remove(0);
        System.out.println("Removed element at index 0: " + removed);
        System.out.println("List after remove: " + arrayList);
        
        boolean isRemoved = arrayList.remove("Fifth Element");
        System.out.println("Removed 'Fifth Element': " + isRemoved);
        System.out.println("List after remove by value: " + arrayList);
        
        // Searching elements
        System.out.println("\n--- Searching Elements ---");
        int index = arrayList.indexOf("Updated Element");
        System.out.println("Index of 'Updated Element': " + index);
        
        boolean contains = arrayList.contains("Last Element");
        System.out.println("Contains 'Last Element': " + contains);
        
        // Size and isEmpty
        System.out.println("\n--- List Information ---");
        System.out.println("Size of list: " + arrayList.size());
        System.out.println("Is list empty: " + arrayList.isEmpty());
        
        // Clear the list
        System.out.println("\n--- Clearing List ---");
        arrayList.clear();
        System.out.println("After clear, size: " + arrayList.size());
        System.out.println("Is list empty: " + arrayList.isEmpty());
        
        // Demonstrating capacity management
        System.out.println("\n--- Capacity Management ---");
        for (int i = 0; i < 10; i++) {
            arrayList.add("Element " + i);
        }
        System.out.println("List after adding 10 elements: " + arrayList);
        
        // Ensure capacity (just calling it, no visible effect in output)
        arrayList.ensureCapacity(20);
        System.out.println("Called ensureCapacity(20)");
        
        // Trim to size
        arrayList.trimToSize();
        System.out.println("Called trimToSize()");
    }
}

==========================================================================================================

import java.util.LinkedList;

public class LinkedListFunctionsDemo {
    public static void main(String[] args) {
        LinkedList<String> linkedList = new LinkedList<>();
        
        // Adding elements using addFirst and addLast
        System.out.println("--- Adding Elements ---");
        linkedList.addFirst("First Element");
        System.out.println("After addFirst: " + linkedList);
        
        linkedList.addLast("Last Element");
        System.out.println("After addLast: " + linkedList);
        
        // Getting elements using getFirst and getLast
        System.out.println("\n--- Retrieving Elements ---");
        System.out.println("First element: " + linkedList.getFirst());
        System.out.println("Last element: " + linkedList.getLast());
        
        // Adding more elements for further demonstration
        linkedList.add("Middle Element");
        System.out.println("\nUpdated list: " + linkedList);
        
        // Using offer methods (queue operations)
        System.out.println("\n--- Queue Operations (offer) ---");
        linkedList.offer("Offered Element");
        System.out.println("After offer: " + linkedList);
        
        linkedList.offerFirst("First Offered");
        System.out.println("After offerFirst: " + linkedList);
        
        linkedList.offerLast("Last Offered");
        System.out.println("After offerLast: " + linkedList);
        
        // Using peek methods
        System.out.println("\n--- Peek Operations ---");
        System.out.println("peek: " + linkedList.peek());
        System.out.println("peekFirst: " + linkedList.peekFirst());
        System.out.println("peekLast: " + linkedList.peekLast());
        System.out.println("List after peek operations: " + linkedList);
        
        // Using poll methods
        System.out.println("\n--- Poll Operations ---");
        System.out.println("poll: " + linkedList.poll());
        System.out.println("List after poll: " + linkedList);
        
        System.out.println("pollFirst: " + linkedList.pollFirst());
        System.out.println("List after pollFirst: " + linkedList);
        
        System.out.println("pollLast: " + linkedList.pollLast());
        System.out.println("List after pollLast: " + linkedList);
        
        // Using push and pop (stack operations)
        System.out.println("\n--- Stack Operations ---");
        linkedList.push("Pushed Element");
        System.out.println("After push: " + linkedList);
        
        linkedList.push("Another Pushed Element");
        System.out.println("After another push: " + linkedList);
        
        System.out.println("pop: " + linkedList.pop());
        System.out.println("List after pop: " + linkedList);
        
        // Using removeFirst and removeLast
        System.out.println("\n--- Remove Operations ---");
        linkedList.add("New Element");
        linkedList.add("Another New Element");
        System.out.println("Updated list: " + linkedList);
        
        System.out.println("removeFirst: " + linkedList.removeFirst());
        System.out.println("List after removeFirst: " + linkedList);
        
        System.out.println("removeLast: " + linkedList.removeLast());
        System.out.println("List after removeLast: " + linkedList);
    }
}

==================================================================================================

import java.util.Vector;
import java.util.Enumeration;

public class VectorFunctionsDemo {
    public static void main(String[] args) {
        Vector<String> vector = new Vector<>();
        
        // Adding elements
        System.out.println("--- Adding Elements ---");
        vector.add("First Element");
        System.out.println("After add: " + vector);
        
        vector.add(0, "New First Element");
        System.out.println("After add at index 0: " + vector);
        
        vector.addElement("Last Element"); // Legacy method
        System.out.println("After addElement: " + vector);
        
        // Getting elements
        System.out.println("\n--- Retrieving Elements ---");
        System.out.println("Element at index 0: " + vector.get(0));
        System.out.println("Element at index 1: " + vector.get(1));
        System.out.println("First element: " + vector.firstElement());
        System.out.println("Last element: " + vector.lastElement());
        System.out.println("Element at index 1 (elementAt): " + vector.elementAt(1));
        
        // Set methods - replacing elements
        System.out.println("\n--- Replacing Elements ---");
        vector.set(1, "Updated Element");
        System.out.println("After set at index 1: " + vector);
        
        vector.setElementAt("Another Updated Element", 0); // Legacy method
        System.out.println("After setElementAt index 0: " + vector);
        
        // Adding more elements
        vector.add("Fourth Element");
        vector.add("Fifth Element");
        System.out.println("\nExpanded vector: " + vector);
        
        // Removing elements
        System.out.println("\n--- Removing Elements ---");
        String removed = vector.remove(0);
        System.out.println("Removed element at index 0: " + removed);
        System.out.println("Vector after remove: " + vector);
        
        boolean isRemoved = vector.remove("Fifth Element");
        System.out.println("Removed 'Fifth Element': " + isRemoved);
        System.out.println("Vector after remove by value: " + vector);
        
        vector.add("Element to Remove");
        vector.removeElementAt(vector.size() - 1); // Legacy method
        System.out.println("After removeElementAt: " + vector);
        
        // Searching elements
        System.out.println("\n--- Searching Elements ---");
        int index = vector.indexOf("Updated Element");
        System.out.println("Index of 'Updated Element': " + index);
        
        boolean contains = vector.contains("Last Element");
        System.out.println("Contains 'Last Element': " + contains);
        
        // Size and capacity
        System.out.println("\n--- Vector Information ---");
        System.out.println("Size of vector: " + vector.size());
        System.out.println("Capacity of vector: " + vector.capacity());
        System.out.println("Is vector empty: " + vector.isEmpty());
        
        // Enumeration (legacy way to iterate)
        System.out.println("\n--- Using Enumeration ---");
        Enumeration<String> elements = vector.elements();
        System.out.print("Elements via enumeration: ");
        while (elements.hasMoreElements()) {
            System.out.print(elements.nextElement() + " ");
        }
        System.out.println();
        
        // Clear the vector
        System.out.println("\n--- Clearing Vector ---");
        vector.clear();
        System.out.println("After clear, size: " + vector.size());
        System.out.println("After clear, capacity: " + vector.capacity());
        
        // Capacity management
        System.out.println("\n--- Capacity Management ---");
        // Set initial capacity to 5, increment by 5
        Vector<String> sizedVector = new Vector<>(5, 5);
        System.out.println("New vector capacity: " + sizedVector.capacity());
        
        for (int i = 0; i < 7; i++) {
            sizedVector.add("Element " + i);
        }
        System.out.println("After adding 7 elements, capacity: " + sizedVector.capacity());
        
        sizedVector.trimToSize();
        System.out.println("After trimToSize, capacity: " + sizedVector.capacity());
        
        sizedVector.ensureCapacity(20);
        System.out.println("After ensureCapacity(20), capacity: " + sizedVector.capacity());
        
        // Setting size explicitly
        System.out.println("\n--- Setting Size ---");
        sizedVector.setSize(10);
        System.out.println("After setSize(10), size: " + sizedVector.size());
        System.out.println("Vector with explicit size: " + sizedVector);
    }
}

====================================================================================================================
import java.util.Stack;
import java.util.EmptyStackException;

public class StackFunctionsDemo {
    public static void main(String[] args) {
        Stack<String> stack = new Stack<>();
        
        // Pushing elements onto the stack
        System.out.println("--- Pushing Elements ---");
        stack.push("First Element");
        System.out.println("After first push: " + stack);
        
        stack.push("Second Element");
        stack.push("Third Element");
        System.out.println("After pushing more elements: " + stack);
        
        // Peeking at the top element
        System.out.println("\n--- Peeking Elements ---");
        String topElement = stack.peek();
        System.out.println("Top element (peek): " + topElement);
        System.out.println("Stack after peek: " + stack);
        
        // Popping elements from the stack
        System.out.println("\n--- Popping Elements ---");
        String poppedElement = stack.pop();
        System.out.println("Popped element: " + poppedElement);
        System.out.println("Stack after pop: " + stack);
        
        // Searching for elements
        System.out.println("\n--- Searching Elements ---");
        stack.push("Fourth Element");
        stack.push("Fifth Element");
        System.out.println("Updated stack: " + stack);
        
        // search() returns 1-based position from the top of the stack
        int position = stack.search("Second Element");
        System.out.println("Position of 'Second Element' from top: " + position);
        
        position = stack.search("Nonexistent Element");
        System.out.println("Position of nonexistent element: " + position); // Returns -1 if not found
        
        // Checking if stack is empty
        System.out.println("\n--- Stack Status ---");
        boolean isEmpty = stack.empty(); // Note: it's empty(), not isEmpty()
        System.out.println("Is stack empty? " + isEmpty);
        System.out.println("Size of stack: " + stack.size());
        
        // Vector methods (Stack extends Vector)
        System.out.println("\n--- Using Vector Methods ---");
        System.out.println("Element at index 0: " + stack.get(0));
        System.out.println("First element (from Vector): " + stack.firstElement());
        System.out.println("Last element (from Vector): " + stack.lastElement());
        
        // Clearing the stack
        System.out.println("\n--- Clearing Stack ---");
        stack.clear();
        System.out.println("After clear, size: " + stack.size());
        System.out.println("Is stack empty? " + stack.empty());
        
        // Demonstrating EmptyStackException
        System.out.println("\n--- Handling Empty Stack ---");
        try {
            stack.pop(); // Will throw EmptyStackException
        } catch (EmptyStackException e) {
            System.out.println("Caught EmptyStackException when trying to pop from empty stack");
        }
        
        // Quick demonstration of adding elements and operations
        System.out.println("\n--- Stack Operations Example ---");
        stack.push("A");
        stack.push("B");
        stack.push("C");
        System.out.println("Stack: " + stack);
        System.out.println("Pop: " + stack.pop());
        System.out.println("Stack: " + stack);
        stack.push("D");
        System.out.println("After pushing 'D': " + stack);
        System.out.println("Peek: " + stack.peek());
        System.out.println("Final stack: " + stack);
    }
}

===========================================================================================================================
Java's Set Interface
The Set interface in Java is part of the Collections Framework and represents a collection that cannot contain duplicate elements. Here's an explanation of its key characteristics and implementations:
Key Characteristics of Set

1) No Duplicates: The primary defining feature of a Set is that it rejects duplicate elements.
2) Unordered Collection: Generally, Sets don't maintain insertion order (with HashSet), though some implementations do (like LinkedHashSet)
3) No Index Access: Unlike List, you cannot access elements by index



import java.util.HashSet;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Collections;

public class HashSetFunctionsExplained {
    public static void main(String[] args) {
        // ===== CREATION FUNCTIONS =====
        
        // 1. Default constructor - creates empty HashSet with default capacity (16) and load factor (0.75)
        HashSet<String> set1 = new HashSet<>();
        System.out.println("1. Empty HashSet: " + set1);
        
        // 2. Constructor with initial capacity
        HashSet<String> set2 = new HashSet<>(20); // Initial capacity of 20
        System.out.println("2. Empty HashSet with custom capacity: " + set2);
        
        // 3. Constructor with initial capacity and load factor
        HashSet<String> set3 = new HashSet<>(30, 0.8f); // Initial capacity 30, load factor 0.8
        System.out.println("3. Empty HashSet with custom capacity and load factor: " + set3);
        
        // 4. Constructor with Collection - copies all elements from collection
        String[] fruits = {"Apple", "Banana", "Cherry", "Apple"}; // Note the duplicate
        HashSet<String> fruitSet = new HashSet<>(Arrays.asList(fruits));
        System.out.println("4. HashSet from array: " + fruitSet + " (duplicate 'Apple' was ignored)");
        
        
        // ===== ELEMENT MANAGEMENT FUNCTIONS =====
        
        // 5. add(E e) - adds element if not present
        HashSet<String> colors = new HashSet<>();
        boolean added = colors.add("Red");
        System.out.println("\n5. Added 'Red': " + added);
        System.out.println("   HashSet: " + colors);
        
        // 6. add() returns false for duplicate elements
        colors.add("Green");
        added = colors.add("Red"); // Try adding duplicate
        System.out.println("6. Added duplicate 'Red': " + added);
        System.out.println("   HashSet: " + colors);
        
        // 7. remove(Object o) - removes element if present
        boolean removed = colors.remove("Red");
        System.out.println("7. Removed 'Red': " + removed);
        System.out.println("   HashSet after removal: " + colors);
        
        // 8. remove() returns false if element not found
        removed = colors.remove("Blue");
        System.out.println("8. Removed non-existent 'Blue': " + removed);
        
        // 9. clear() - removes all elements
        colors.add("Yellow");
        colors.add("Purple");
        System.out.println("9. Before clear: " + colors);
        colors.clear();
        System.out.println("   After clear: " + colors);
        
        
        // ===== QUERY FUNCTIONS =====
        
        HashSet<Integer> numbers = new HashSet<>(Arrays.asList(1, 2, 3, 4, 5));
        
        // 10. contains(Object o) - checks if element exists
        boolean hasThree = numbers.contains(3);
        boolean hasSix = numbers.contains(6);
        System.out.println("\n10. Contains 3? " + hasThree);
        System.out.println("    Contains 6? " + hasSix);
        
        // 11. isEmpty() - checks if set has no elements
        System.out.println("11. Is numbers empty? " + numbers.isEmpty());
        System.out.println("    Is colors empty? " + colors.isEmpty());
        
        // 12. size() - returns number of elements
        System.out.println("12. Size of numbers: " + numbers.size());
        
        
        // ===== BULK OPERATIONS =====
        
        HashSet<Character> set1Chars = new HashSet<>(Arrays.asList('A', 'B', 'C', 'D'));
        HashSet<Character> set2Chars = new HashSet<>(Arrays.asList('C', 'D', 'E', 'F'));
        
        // 13. addAll(Collection) - union operation
        HashSet<Character> unionSet = new HashSet<>(set1Chars);
        unionSet.addAll(set2Chars);
        System.out.println("\n13. Set1: " + set1Chars);
        System.out.println("    Set2: " + set2Chars);
        System.out.println("    Union (addAll): " + unionSet);
        
        // 14. retainAll(Collection) - intersection operation
        HashSet<Character> intersectionSet = new HashSet<>(set1Chars);
        intersectionSet.retainAll(set2Chars);
        System.out.println("14. Intersection (retainAll): " + intersectionSet);
        
        // 15. removeAll(Collection) - difference operation
        HashSet<Character> differenceSet = new HashSet<>(set1Chars);
        differenceSet.removeAll(set2Chars);
        System.out.println("15. Difference (removeAll): " + differenceSet);
        
        // 16. containsAll(Collection) - checks if set contains all elements of another collection
        boolean containsAll = unionSet.containsAll(set1Chars);
        System.out.println("16. Does union contain all of Set1? " + containsAll);
        
        
        // ===== ITERATION FUNCTIONS =====
        
        HashSet<String> cities = new HashSet<>(Arrays.asList("New York", "London", "Tokyo", "Paris"));
        
        // 17. Enhanced for loop iteration
        System.out.println("\n17. Enhanced for loop iteration:");
        for (String city : cities) {
            System.out.println("    City: " + city);
        }
        
        // 18. Iterator approach
        System.out.println("18. Iterator approach:");
        Iterator<String> iterator = cities.iterator();
        while (iterator.hasNext()) {
            System.out.println("    City: " + iterator.next());
        }
        
        // 19. Iterator with remove operation
        System.out.println("19. Iterator with removal:");
        iterator = cities.iterator();
        while (iterator.hasNext()) {
            String city = iterator.next();
            if (city.equals("London")) {
                iterator.remove(); // Safe removal during iteration
            }
        }
        System.out.println("    Cities after removal: " + cities);
        
        
        // ===== UTILITY OPERATIONS =====
        
        // 20. toArray() - converts set to Object array
        Object[] cityArray = cities.toArray();
        System.out.println("\n20. toArray(): " + Arrays.toString(cityArray));
        
        // 21. toArray(T[] a) - converts set to specified array type
        String[] cityStringArray = cities.toArray(new String[0]);
        System.out.println("21. toArray(T[]): " + Arrays.toString(cityStringArray));
        
        // 22. equals() - compares sets
        HashSet<String> citiesCopy = new HashSet<>(cities);
        boolean areEqual = cities.equals(citiesCopy);
        System.out.println("22. Cities equals its copy? " + areEqual);
        
        // 23. hashCode() - returns hash code value for set
        System.out.println("23. HashCode of cities: " + cities.hashCode());
        
        
        // ===== ADVANCED EXAMPLES =====
        
        // 24. Using null values
        HashSet<String> withNull = new HashSet<>();
        withNull.add(null);
        withNull.add("Something");
        System.out.println("\n24. HashSet with null: " + withNull);
        System.out.println("    Contains null? " + withNull.contains(null));
        
        // 25. Converting between Collections
        HashSet<Integer> numSet = new HashSet<>(Arrays.asList(5, 2, 9, 1, 3));
        System.out.println("25. Original set: " + numSet);
        
        // Finding min/max elements
        Integer min = Collections.min(numSet);
        Integer max = Collections.max(numSet);
        System.out.println("    Min value: " + min);
        System.out.println("    Max value: " + max);
    }
}

===========================================================================================================================

import java.util.*;

public class TreeSetExample {
    public static void main(String[] args) {
        // Create a TreeSet
        TreeSet<Integer> numbers = new TreeSet<>();

        // Add elements
        numbers.add(10);
        numbers.add(5);
        numbers.add(20);
        numbers.add(15);
        numbers.add(10); // Duplicate, will be ignored

        System.out.println("TreeSet: " + numbers); // Sorted order: [5, 10, 15, 20]

        // Remove an element
        numbers.remove(15);
        System.out.println("After removing 15: " + numbers); // [5, 10, 20]

        // Check if an element exists
        System.out.println("Contains 10? " + numbers.contains(10)); // true
        System.out.println("Contains 100? " + numbers.contains(100)); // false

        // First and Last
        System.out.println("First: " + numbers.first()); // 5
        System.out.println("Last: " + numbers.last()); // 20

        // Ceiling and Floor
        System.out.println("Ceiling of 12: " + numbers.ceiling(12)); // 20
        System.out.println("Floor of 12: " + numbers.floor(12)); // 10

        // Higher and Lower
        System.out.println("Higher than 10: " + numbers.higher(10)); // 20
        System.out.println("Lower than 10: " + numbers.lower(10)); // 5

        // HeadSet, TailSet, SubSet
        System.out.println("HeadSet(15): " + numbers.headSet(15)); // [5, 10]
        System.out.println("TailSet(10): " + numbers.tailSet(10)); // [10, 20]
        System.out.println("SubSet(5, 20): " + numbers.subSet(5, 20)); // [5, 10]

        // Size
        System.out.println("Size: " + numbers.size());

        // Is Empty
        System.out.println("Is empty? " + numbers.isEmpty());

        // Clear all elements
        numbers.clear();
        System.out.println("After clear: " + numbers); // []
    }
}
==========================================================================================================================



import java.util.*;

public class EnumSetExample {

    // Define an enum
    enum Day {
        MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
    }

    public static void main(String[] args) {

        // Create EnumSet with all values
        EnumSet<Day> week = EnumSet.allOf(Day.class);
        System.out.println("All days: " + week);

        // Create empty EnumSet
        EnumSet<Day> emptySet = EnumSet.noneOf(Day.class);
        System.out.println("Empty set: " + emptySet);

        // Add elements
        emptySet.add(Day.MONDAY);
        emptySet.add(Day.FRIDAY);
        System.out.println("After adding: " + emptySet);

        // Remove element
        emptySet.remove(Day.MONDAY);
        System.out.println("After removing MONDAY: " + emptySet);

        // Range (inclusive)
        EnumSet<Day> midWeek = EnumSet.range(Day.TUESDAY, Day.THURSDAY);
        System.out.println("Midweek days: " + midWeek);

        // Complement (all not in given set)
        EnumSet<Day> weekend = EnumSet.of(Day.SATURDAY, Day.SUNDAY);
        EnumSet<Day> weekdays = EnumSet.complementOf(weekend);
        System.out.println("Weekdays: " + weekdays);

        // Copy of another EnumSet
        EnumSet<Day> copy = EnumSet.copyOf(weekdays);
        System.out.println("Copy of weekdays: " + copy);

        // Contains
        System.out.println("Contains WEDNESDAY? " + copy.contains(Day.WEDNESDAY)); // true

        // Size and isEmpty
        System.out.println("Size: " + copy.size());
        System.out.println("Is empty? " + copy.isEmpty());

        // Iterate through EnumSet
        System.out.print("Iterating: ");
        for (Day day : copy) {
            System.out.print(day + " ");
        }

        // Clear all elements
        copy.clear();
        System.out.println("\nAfter clear: " + copy);
    }
}

==========================================================================================================================








