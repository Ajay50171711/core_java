java.util
│
├── Collection (interface)
│   │
│   ├── List (interface)
│   │   ├── ArrayList
│   │   ├── LinkedList
│   │   ├── Vector
│   │   │   └── Stack
│   │
│   ├── Set (interface)
│   │   ├── HashSet
│   │   │   └── LinkedHashSet
│   │   ├── TreeSet (implements SortedSet, NavigableSet)
│   │   ├── EnumSet
│   │
│   ├── Queue (interface)
│   │   ├── PriorityQueue
│   │   ├── LinkedList (also implements List)
│   │   │
│   │   └── Deque (interface, extends Queue)
│   │       ├── ArrayDeque
│   │       └── LinkedList (also implements List)

========================================================================================

1. List (interface)
├── Core Operations
│   ├── add(E e)                    // Appends element to end
│   ├── add(int index, E element)   // Inserts at position
│   ├── get(int index)              // Returns element at position
│   ├── remove(int index)           // Removes element at position
│   ├── set(int index, E element)   // Replaces element at position
│   └── size()                      // Returns number of elements
│
├── Positional Access
│   ├── indexOf(Object o)           // First occurrence position
│   ├── lastIndexOf(Object o)       // Last occurrence position
│   └── subList(int from, int to)   // View of portion of list
│
├── Implementations
│   ├── ArrayList
│   │   ├── Internal Structure: Dynamic array
│   │   ├── Performance Characteristics
│   │   │   ├── Random access: O(1)
│   │   │   ├── Insertion/Deletion (end): O(1) amortized
│   │   │   ├── Insertion/Deletion (middle): O(n)
│   │   │   └── Search: O(n)
│   │   └── Special Features: Fast iteration, good locality of reference
│   │
│   ├── LinkedList
│   │   ├── Internal Structure: Doubly-linked list
│   │   ├── Performance Characteristics
│   │   │   ├── Random access: O(n)
│   │   │   ├── Insertion/Deletion (any position with iterator): O(1)
│   │   │   ├── Insertion/Deletion (position by index): O(n)
│   │   │   └── Search: O(n)
│   │   └── Special Features: Implements both List and Deque interfaces
│   │
│   └── Vector (legacy, synchronized)
│       ├── Internal Structure: Dynamic array (synchronized)
│       ├── Performance Characteristics: Similar to ArrayList but thread-safe
│       └── Subclass: Stack
│           ├── Additional operations: push(), pop(), peek()
│           └── LIFO (Last-In-First-Out) behavior
========================================================================================
2. SET INTERFACE
Set (interface)
├── Core Operations
│   ├── add(E e)          // Adds element if not present
│   ├── contains(Object o) // Checks if element exists
│   ├── remove(Object o)   // Removes element if present
│   └── size()            // Returns number of elements
│
├── Bulk Operations
│   ├── addAll(Collection c)     // Union
│   ├── retainAll(Collection c)  // Intersection
│   └── removeAll(Collection c)  // Difference
│
├── SortedSet (sub-interface)
│   ├── first()           // First element
│   ├── last()            // Last element
│   └── subSet(E from, E to) // View of portion of set
│
├── NavigableSet (sub-interface of SortedSet)
│   ├── lower(E e)        // Greatest element < e
│   ├── floor(E e)        // Greatest element <= e
│   ├── ceiling(E e)      // Least element >= e
│   └── higher(E e)       // Least element > e
│
├── Implementations
│   ├── HashSet
│   │   ├── Internal Structure: Backed by HashMap
│   │   ├── Performance Characteristics
│   │   │   ├── add/remove/contains: O(1) average case
│   │   │   └── Iteration: O(capacity + size)
│   │   └── Special Features: Fastest implementation, no order guarantee
│   │
│   ├── LinkedHashSet
│   │   ├── Internal Structure: HashMap with linked list
│   │   ├── Performance Characteristics: Similar to HashSet with overhead for maintaining order
│   │   └── Special Features: Maintains insertion order
│   │
│   ├── TreeSet
│   │   ├── Internal Structure: Red-black tree (TreeMap)
│   │   ├── Performance Characteristics
│   │   │   ├── add/remove/contains: O(log n)
│   │   │   └── Ordered traversal: O(n)
│   │   └── Special Features: Sorted elements, implements NavigableSet
│   │
│   └── EnumSet
│       ├── Internal Structure: Bit vector
│       ├── Performance Characteristics: Very fast operations
│       └── Special Features: Specifically for enum values



=========================================================================================

3. QUEUE INTERFACE
Queue (interface)
├── Core Operations
│   ├── offer(E e)       // Adds element to queue (capacity-friendly)
│   ├── poll()           // Removes and returns head (returns null if empty)
│   ├── peek()           // Returns head without removing (null if empty)
│   └── size()           // Returns number of elements
│
├── Throws Exception Variants
│   ├── add(E e)         // Adds element (throws exception if capacity restricted)
│   ├── remove()         // Removes and returns head (throws exception if empty)
│   └── element()        // Returns head (throws exception if empty)
│
├── Deque (sub-interface, double-ended queue)
│   ├── offerFirst(E e)  // Inserts at front
│   ├── offerLast(E e)   // Inserts at end
│   ├── pollFirst()      // Removes from front
│   ├── pollLast()       // Removes from end
│   ├── peekFirst()      // Examines front
│   └── peekLast()       // Examines end
│
├── BlockingQueue (sub-interface in java.util.concurrent)
│   ├── put(E e)         // Blocks until space available
│   ├── take()           // Blocks until element available
│   ├── offer(E e, long timeout, TimeUnit unit) // Time-bounded insertion
│   └── poll(long timeout, TimeUnit unit)       // Time-bounded removal
│
├── Implementations
│   ├── PriorityQueue
│   │   ├── Internal Structure: Binary heap
│   │   ├── Performance Characteristics
│   │   │   ├── peek/element: O(1)
│   │   │   ├── poll/remove: O(log n)
│   │   │   ├── add/offer: O(log n)
│   │   │   └── Contains: O(n)
│   │   └── Special Features: Elements ordered by priority
│   │
│   ├── LinkedList (implements both List and Deque)
│   │   ├── Performance Characteristics for Queue operations
│   │   │   ├── offer/poll/peek: O(1)
│   │   └── Special Features: General-purpose list and queue
│   │
│   ├── ArrayDeque
│   │   ├── Internal Structure: Resizable circular array
│   │   ├── Performance Characteristics
│   │   │   ├── add/offer/remove/poll: O(1)
│   │   │   └── Contains: O(n)
│   │   └── Special Features: More efficient than LinkedList for most queue operations
│   │
│   └── Concurrent Queue Implementations
│       ├── ConcurrentLinkedQueue: Non-blocking concurrent queue
│       ├── ArrayBlockingQueue: Bounded blocking queue
│       ├── LinkedBlockingQueue: Optionally bounded blocking queue
│       └── PriorityBlockingQueue: Blocking priority queue

====================================================================================

ArrayList Internal Structure:
┌──────────────────────────────────────────────────┐
│  ArrayList                                        │
├──────────────────────────────────────────────────┤
│ - elementData: Object[]  // Internal array       │
│ - size: int             // Number of elements    │
├──────────────────────────────────────────────────┤
│ + add(E e): boolean                              │
│ + add(int index, E element): void                │
│ + get(int index): E                              │
│ + remove(int index): E                           │
│ + ensureCapacity(int minCapacity): void          │
│ + trimToSize(): void                             │
└──────────────────────────────────────────────────┘


=========================================================================

LinkedList Internal Structure:
┌──────────────────────────────────────────────────┐
│  LinkedList                                       │
├──────────────────────────────────────────────────┤
│ - first: Node<E>  // Reference to first node     │
│ - last: Node<E>   // Reference to last node      │
│ - size: int       // Number of elements          │
├──────────────────────────────────────────────────┤
│ + add(E e): boolean                              │
│ + add(int index, E element): void                │
│ + getFirst(): E                                  │
│ + getLast(): E                                   │
│ + removeFirst(): E                               │
│ + removeLast(): E                                │
└──────────────────────────────────────────────────┘
│
└── Node<E>
    ├── item: E       // Element value
    ├── next: Node<E> // Link to next node
    └── prev: Node<E> // Link to previous node

========================================================================================


import java.util.ArrayList;

public class ArrayListFunctionsDemo {
    public static void main(String[] args) {
        ArrayList<String> arrayList = new ArrayList<>();
        
        // Adding elements
        System.out.println("--- Adding Elements ---");
        arrayList.add("First Element");
        System.out.println("After add: " + arrayList);
        
        arrayList.add(0, "New First Element");
        System.out.println("After add at index 0: " + arrayList);
        
        arrayList.add("Last Element");
        System.out.println("After adding at end: " + arrayList);
        
        // Getting elements
        System.out.println("\n--- Retrieving Elements ---");
        System.out.println("Element at index 0: " + arrayList.get(0));
        System.out.println("Element at index 1: " + arrayList.get(1));
        System.out.println("Element at last index: " + arrayList.get(arrayList.size() - 1));
        
        // Set method - replacing elements
        System.out.println("\n--- Replacing Elements ---");
        arrayList.set(1, "Updated Element");
        System.out.println("After set at index 1: " + arrayList);
        
        // Adding more elements
        arrayList.add("Fourth Element");
        arrayList.add("Fifth Element");
        System.out.println("\nExpanded list: " + arrayList);
        
        // Removing elements
        System.out.println("\n--- Removing Elements ---");
        String removed = arrayList.remove(0);
        System.out.println("Removed element at index 0: " + removed);
        System.out.println("List after remove: " + arrayList);
        
        boolean isRemoved = arrayList.remove("Fifth Element");
        System.out.println("Removed 'Fifth Element': " + isRemoved);
        System.out.println("List after remove by value: " + arrayList);
        
        // Searching elements
        System.out.println("\n--- Searching Elements ---");
        int index = arrayList.indexOf("Updated Element");
        System.out.println("Index of 'Updated Element': " + index);
        
        boolean contains = arrayList.contains("Last Element");
        System.out.println("Contains 'Last Element': " + contains);
        
        // Size and isEmpty
        System.out.println("\n--- List Information ---");
        System.out.println("Size of list: " + arrayList.size());
        System.out.println("Is list empty: " + arrayList.isEmpty());
        
        // Clear the list
        System.out.println("\n--- Clearing List ---");
        arrayList.clear();
        System.out.println("After clear, size: " + arrayList.size());
        System.out.println("Is list empty: " + arrayList.isEmpty());
        
        // Demonstrating capacity management
        System.out.println("\n--- Capacity Management ---");
        for (int i = 0; i < 10; i++) {
            arrayList.add("Element " + i);
        }
        System.out.println("List after adding 10 elements: " + arrayList);
        
        // Ensure capacity (just calling it, no visible effect in output)
        arrayList.ensureCapacity(20);
        System.out.println("Called ensureCapacity(20)");
        
        // Trim to size
        arrayList.trimToSize();
        System.out.println("Called trimToSize()");
    }
}

==========================================================================================================

import java.util.LinkedList;

public class LinkedListFunctionsDemo {
    public static void main(String[] args) {
        LinkedList<String> linkedList = new LinkedList<>();
        
        // Adding elements using addFirst and addLast
        System.out.println("--- Adding Elements ---");
        linkedList.addFirst("First Element");
        System.out.println("After addFirst: " + linkedList);
        
        linkedList.addLast("Last Element");
        System.out.println("After addLast: " + linkedList);
        
        // Getting elements using getFirst and getLast
        System.out.println("\n--- Retrieving Elements ---");
        System.out.println("First element: " + linkedList.getFirst());
        System.out.println("Last element: " + linkedList.getLast());
        
        // Adding more elements for further demonstration
        linkedList.add("Middle Element");
        System.out.println("\nUpdated list: " + linkedList);
        
        // Using offer methods (queue operations)
        System.out.println("\n--- Queue Operations (offer) ---");
        linkedList.offer("Offered Element");
        System.out.println("After offer: " + linkedList);
        
        linkedList.offerFirst("First Offered");
        System.out.println("After offerFirst: " + linkedList);
        
        linkedList.offerLast("Last Offered");
        System.out.println("After offerLast: " + linkedList);
        
        // Using peek methods
        System.out.println("\n--- Peek Operations ---");
        System.out.println("peek: " + linkedList.peek());
        System.out.println("peekFirst: " + linkedList.peekFirst());
        System.out.println("peekLast: " + linkedList.peekLast());
        System.out.println("List after peek operations: " + linkedList);
        
        // Using poll methods
        System.out.println("\n--- Poll Operations ---");
        System.out.println("poll: " + linkedList.poll());
        System.out.println("List after poll: " + linkedList);
        
        System.out.println("pollFirst: " + linkedList.pollFirst());
        System.out.println("List after pollFirst: " + linkedList);
        
        System.out.println("pollLast: " + linkedList.pollLast());
        System.out.println("List after pollLast: " + linkedList);
        
        // Using push and pop (stack operations)
        System.out.println("\n--- Stack Operations ---");
        linkedList.push("Pushed Element");
        System.out.println("After push: " + linkedList);
        
        linkedList.push("Another Pushed Element");
        System.out.println("After another push: " + linkedList);
        
        System.out.println("pop: " + linkedList.pop());
        System.out.println("List after pop: " + linkedList);
        
        // Using removeFirst and removeLast
        System.out.println("\n--- Remove Operations ---");
        linkedList.add("New Element");
        linkedList.add("Another New Element");
        System.out.println("Updated list: " + linkedList);
        
        System.out.println("removeFirst: " + linkedList.removeFirst());
        System.out.println("List after removeFirst: " + linkedList);
        
        System.out.println("removeLast: " + linkedList.removeLast());
        System.out.println("List after removeLast: " + linkedList);
    }
}

==================================================================================================




