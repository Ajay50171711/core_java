In core Java, both string methods and input methods are fundamental concepts for working with text and user interaction. 

String Methods in Java
Strings in Java are objects of the String class that represent sequences of characters. The String class provides many built-in methods to manipulate strings:
Common String Methods:

Basic Methods:
length(): Returns the number of characters in the string
charAt(int index): Returns the character at the specified index
isEmpty(): Checks if the string is empty


String Comparison:
equals(Object obj): Compares string content for equality
equalsIgnoreCase(String str): Compares strings ignoring case
compareTo(String str): Compares strings lexicographically


Searching and Extraction:
indexOf(String str): Returns the index of the first occurrence
lastIndexOf(String str): Returns the index of the last occurrence
substring(int beginIndex): Returns substring from specified index
substring(int beginIndex, int endIndex): Returns substring between indexes


Modification:
concat(String str): Concatenates strings
replace(char old, char new): Replaces characters
replaceAll(String regex, String replacement): Replaces all occurrences matching regex
trim(): Removes whitespace from both ends
toLowerCase(): Converts to lowercase
toUpperCase(): Converts to uppercase


Checking:
startsWith(String prefix): Checks if string starts with specified prefix
endsWith(String suffix): Checks if string ends with specified suffix
contains(CharSequence sequence): Checks if string contains the sequence
---------------------------------------------------------------------------
public class StringMethodsExamples {
    public static void main(String[] args) {
        // Basic Methods
        basicMethods();
        
        // String Comparison Methods
        comparisonMethods();
        
        // Searching and Extraction Methods
        searchingExtractionMethods();
        
        // Modification Methods
        modificationMethods();
        
        // Checking Methods
        checkingMethods();
    }
    
    public static void basicMethods() {
        System.out.println("\n----- BASIC METHODS -----\n");
        
        // length()
        String text = "Hello Java";
        int length = text.length();
        System.out.println("Original string: \"" + text + "\"");
        System.out.println("length(): " + length);
        
        // charAt(int index)
        char character = text.charAt(1);
        System.out.println("\nOriginal string: \"" + text + "\"");
        System.out.println("charAt(1): " + character);
        
        // isEmpty()
        String text1 = "";
        String text2 = "Hello";
        System.out.println("\nFirst string: \"" + text1 + "\"");
        System.out.println("Second string: \"" + text2 + "\"");
        System.out.println("isEmpty() for first string: " + text1.isEmpty());
        System.out.println("isEmpty() for second string: " + text2.isEmpty());
    }
    
    public static void comparisonMethods() {
        System.out.println("\n----- STRING COMPARISON METHODS -----\n");
        
        // equals(Object obj)
        String str1 = "Hello";
        String str2 = "Hello";
        String str3 = "hello";
        System.out.println("First string: \"" + str1 + "\"");
        System.out.println("Second string: \"" + str2 + "\"");
        System.out.println("Third string: \"" + str3 + "\"");
        System.out.println("equals() - First equals Second: " + str1.equals(str2));
        System.out.println("equals() - First equals Third: " + str1.equals(str3));
        
        // equalsIgnoreCase(String str)
        System.out.println("\nFirst string: \"" + str1 + "\"");
        System.out.println("Third string: \"" + str3 + "\"");
        System.out.println("equalsIgnoreCase() - First equals Third (ignoring case): " + 
                            str1.equalsIgnoreCase(str3));
        
        // compareTo(String str)
        String a = "apple";
        String b = "banana";
        System.out.println("\nFirst string: \"" + a + "\"");
        System.out.println("Second string: \"" + b + "\"");
        System.out.println("compareTo() - apple compared to banana: " + a.compareTo(b));
        System.out.println("compareTo() - banana compared to apple: " + b.compareTo(a));
        System.out.println("compareTo() - apple compared to apple: " + a.compareTo(a));
    }
    
    public static void searchingExtractionMethods() {
        System.out.println("\n----- SEARCHING AND EXTRACTION METHODS -----\n");
        
        // indexOf(String str)
        String text = "Hello World";
        int index = text.indexOf("World");
        System.out.println("Original string: \"" + text + "\"");
        System.out.println("indexOf(\"World\"): " + index);
        
        // lastIndexOf(String str)
        String text2 = "Hello World, Hello Java";
        int lastIndex = text2.lastIndexOf("Hello");
        System.out.println("\nOriginal string: \"" + text2 + "\"");
        System.out.println("lastIndexOf(\"Hello\"): " + lastIndex);
        
        // substring(int beginIndex)
        String sub1 = text.substring(6);
        System.out.println("\nOriginal string: \"" + text + "\"");
        System.out.println("substring(6): \"" + sub1 + "\"");
        
        // substring(int beginIndex, int endIndex)
        String sub2 = text.substring(0, 5);
        System.out.println("\nOriginal string: \"" + text + "\"");
        System.out.println("substring(0, 5): \"" + sub2 + "\"");
    }
    
    public static void modificationMethods() {
        System.out.println("\n----- MODIFICATION METHODS -----\n");
        
        // concat(String str)
        String str1 = "Hello";
        String str2 = " World";
        String result = str1.concat(str2);
        System.out.println("First string: \"" + str1 + "\"");
        System.out.println("Second string: \"" + str2 + "\"");
        System.out.println("concat(): \"" + result + "\"");
        
        // replace(char old, char new)
        String text = "Hello";
        String newText = text.replace('l', 'w');
        System.out.println("\nOriginal string: \"" + text + "\"");
        System.out.println("replace('l', 'w'): \"" + newText + "\"");
        
        // replaceAll(String regex, String replacement)
        String text2 = "Hello 123 World 456";
        String newText2 = text2.replaceAll("\\d+", "NUMBER");
        System.out.println("\nOriginal string: \"" + text2 + "\"");
        System.out.println("replaceAll(\"\\\\d+\", \"NUMBER\"): \"" + newText2 + "\"");
        
        // trim()
        String text3 = "   Hello World   ";
        String trimmed = text3.trim();
        System.out.println("\nOriginal string: \"" + text3 + "\"");
        System.out.println("trim(): \"" + trimmed + "\"");
        
        // toLowerCase()
        String text4 = "Hello WORLD";
        String lower = text4.toLowerCase();
        System.out.println("\nOriginal string: \"" + text4 + "\"");
        System.out.println("toLowerCase(): \"" + lower + "\"");
        
        // toUpperCase()
        String text5 = "Hello world";
        String upper = text5.toUpperCase();
        System.out.println("\nOriginal string: \"" + text5 + "\"");
        System.out.println("toUpperCase(): \"" + upper + "\"");
    }
    
    public static void checkingMethods() {
        System.out.println("\n----- CHECKING METHODS -----\n");
        
        // startsWith(String prefix)
        String text = "Hello World";
        boolean starts = text.startsWith("Hello");
        System.out.println("Original string: \"" + text + "\"");
        System.out.println("startsWith(\"Hello\"): " + starts);
        
        // endsWith(String suffix)
        boolean ends = text.endsWith("World");
        System.out.println("\nOriginal string: \"" + text + "\"");
        System.out.println("endsWith(\"World\"): " + ends);
        
        // contains(CharSequence sequence)
        boolean contains = text.contains("lo Wo");
        System.out.println("\nOriginal string: \"" + text + "\"");
        System.out.println("contains(\"lo Wo\"): " + contains);
    }
}

------------------------------------------------------------------------------------------------------------------------------------
Java Input Methods Simplified
In Java, there are three main ways to get input from users:
1. Scanner Class
This is the most common and easiest way to read user input:

import java.util.Scanner;

public class ScannerMethodsExample {
    public static void main(String[] args) {
        // Create a Scanner
        Scanner input = new Scanner(System.in);
        
        // Example 1: nextLine() - reads a whole line of text
        System.out.print("Enter your full name: ");
        String fullName = input.nextLine();
        System.out.println("Your full name is: " + fullName);
        
        // Example 2: next() - reads just one word
        System.out.print("Enter your favorite color: ");
        String favoriteColor = input.next();
        System.out.println("Your favorite color is: " + favoriteColor);
        
        // Clear the buffer (consume the leftover newline after next())
        input.nextLine();
        
        // Example 3: nextInt() - reads a number (without decimal)
        System.out.print("Enter your age: ");
        int age = input.nextInt();
        System.out.println("You are " + age + " years old.");
        
        // Clear the buffer (consume the leftover newline after nextInt())
        input.nextLine();
        
        // Example 4: nextDouble() - reads a number (with decimal)
        System.out.print("Enter your height in meters: ");
        double height = input.nextDouble();
        System.out.println("Your height is " + height + " meters.");
        
        // Always close the Scanner when done
        input.close();
    }
}


Scanner can read different types of data:

nextLine() - reads a whole line of text
next() - reads just one word
nextInt() - reads a number (without decimal)
nextDouble() - reads a number (with decimal)


2. BufferedReader
This method is a bit more efficient but requires handling exceptions:

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class SimpleBufferedReader {
    public static void main(String[] args) throws IOException {
        // Create a BufferedReader
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        
        // Ask for name
        System.out.print("What's your name? ");
        String name = reader.readLine();
        
        // Ask for age (need to convert string to number)
        System.out.print("How old are you? ");
        int age = Integer.parseInt(reader.readLine());
        
        // Show the information back
        System.out.println("Hi " + name + "! You are " + age + " years old.");
        
        // Always close when done
        reader.close();
    }
}
BufferedReader only reads text (readLine()), so you need to convert to numbers when needed.

3. Console Class
This is useful mainly for secure input like passwords:

import java.io.Console;
public class SimpleConsole {
    public static void main(String[] args) {
        // Get the console (might be null in some environments)
        Console console = System.console();
        
        // Check if console is available
        if (console == null) {
            System.out.println("No console available");
            return;
        }
        
        // Get username directly with prompt
        String username = console.readLine("Username: ");
        
        // Get password (characters won't show when typing)
        char[] passwordChars = console.readPassword("Password: ");
        String password = new String(passwordChars);
        
        // Show username (never show passwords in real code!)
        System.out.println("Welcome, " + username);
    }
}
The Console class is special because it can hide password input, but it doesn't work in all environments (like some IDEs).
Key Differences:

Scanner: Easiest to use, good for beginners, can read different types directly
BufferedReader: More efficient for large inputs, only reads text
Console: Good for secure input like passwords, but doesn't work everywhere

For most simple programs, Scanner is the best choice to start with.
